# -*- mode: ruby -*-
# vi: set ft=ruby :

# Settings:
mathProgram = "M2"
npmCmd = "npm start"
logfilePath = "/home/vagrant/web" + mathProgram + ".log"

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "generic/fedora32"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080
  config.vm.network :forwarded_port, guest: 8002, host: 8002

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "../../", "/home/vagrant/InteractiveShell"
  config.vm.synced_folder "../../Macaulay2-tutorials", "/home/vagrant/InteractiveShell/public-Macaulay2/shared-tutorials"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #    vb.memory = "1024"
    vb.memory = "3072"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "preparation", type:"shell", privileged:true, run:"once", inline: <<-SHELL
    dnf upgrade -yq
    dnf install -yq dnf-plugins-core
    dnf -yq config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo

    dnf upgrade -yq
    dnf install -yq wget nodejs npm
    dnf install -yq docker-ce docker-ce-cli containerd.io
    systemctl enable docker
    grubby --update-kernel=ALL --args="systemd.unified_cgroup_hierarchy=0"
    chown -R vagrant:vagrant /home/vagrant/InteractiveShell
  SHELL
  
  config.vm.provision :reload

  config.vm.provision "docker", type:"shell", privileged:false, run:"once", inline: <<-SHELL
    cd InteractiveShell
    rm id_rsa*
    ssh-keygen -b 1024 -f id_rsa -P ''
    sudo docker build -t m2container .
  SHELL
   
  config.vm.provision "remove", type:"shell", privileged:false, run: "always", after:"docker", inline: <<-SHELL
       rm -f /home/vagrant/InteractiveShell/public/users.htpasswd
     SHELL
    
      if File.exists?('users.htpasswd') then 
        config.vm.provision "file", source: "./users.htpasswd", run: "always", destination: "/home/vagrant/InteractiveShell/public/users.htpasswd"
      end

  # config.vm.provision "cron", type:"shell", privileged:false do |cron|
  #     cron.inline = "echo \"" + cronString + "\" > tmpcron; crontab tmpcron; rm tmpcron"
  # end

  config.vm.provision "startup_server", type:"shell", privileged:false, run: "always", after:"remove", inline: <<-SHELL
      cd /home/vagrant/InteractiveShell
      (npm start 2>&1 > ../webm2.log) &
      sleep 10
  SHELL

end
